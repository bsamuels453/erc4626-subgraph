
type ERC20Token @entity {
  "Token address"
  id: Bytes!

  "Number of decimals for this Token"
  decimals: Int!

  "Name of the Token"
  name: String!

  "Symbol of the Token"
  symbol: String!
}

type ERC4626Vault @entity {
  "Vault address"
  id: Bytes!

  "Assumed to never change. Maybe reference ERC20Token instead?"
  underlying: ERC20Token!

  "Name of the vault"
  name: String!

  "Symbol of the vault"
  symbol: String!

  "Number of decimals for the vault's share token"
  decimals: Int!
  # totalAssets: BigInt!
  # totalAssetsValueUSDC
  # HasAccountingErrors

  "The block in which this vault was first detected by the subgraph."
  firstBlock: BigInt!

  "Whether any serious accounting problems have been detected while indexing this vault."
  accountingErrata: Boolean!

  """
  This value is set to true if there have been withdraws/redemptions from this vault with no identifiable source.
  This may be due to airdropped shares, or incorrect accounting on the vault's side with regards to how it handles deposits.
  """
  containsAirdroppedShares: Boolean!

  """
  The latest APY estimation for this Vault. This estimation is based on the exponential moving average of the vault's 
  price per share, which itself is calculated based on withdraw/redemption events. The EMA uses a half time of 15 days.

  If null, there is either:
  1. Not enough data to generate an estimation
  2. Accounting errors or other errata that are preventing the subgraph from generating an estimation.
  """
  estimatedAPY: BigDecimal
  latestAPYMeasurement: VaultPerformanceSample
  historicalPerformance: [VaultPerformanceSample!]! @derivedFrom(field: "vault")

  "The vault's reported totalAssets. Normalized to the underlying token's decimals."
  assetTvl: BigDecimal!

  """
  The entity representing the latest measurement for the vault's totalAssets. 
  Use this to figure out how long it's been since vault.tvl was last updated.
  """
  latestTVLMeasurement: VaultTVLMeasurement

  "All historical TVL measurements for this vault"
  historicalTVL: [VaultTVLMeasurement!]! @derivedFrom(field: "vault")

}

"""
Used to track historical TVL data for each vault.
New measurements are only taken when a user deposits, withdraws, or transfers to/from the vault.
"""
type VaultTVLMeasurement @entity @immutable {
  "Concatenation of vaultAddress+blockHash"
  id: Bytes!
  
  "The vault the measurement is for"
  vault: ERC4626Vault!

  "The block height this measurement was taken in"
  block: BigInt!

  "The timestamp of the block this measurement was taken in"
  timestamp: BigInt!

  "The amount of assets the vault reported under its management via totalAssets()"
  reportedAssets: BigDecimal!
}

" Used to keep track of contracts emitting 4626-matching events, but are not 4626 compliant."
type NonERC4626Contract @entity @immutable {
  "Contract address"
  id: Bytes!
}

type Account @entity {
  "EOA or contract address of the account"
  id: Bytes!

  "Current and historical vault positions this account has"
  positions: [AccountPosition!]! @derivedFrom(field: "account")
}

"""
Used to track an account's current & historical position in a specific vault. 
"""
type AccountPosition @entity {
  "Concatenation of accountAddress+vaultAddress"
  id: Bytes!

  "The account this position is for"
  account: Account!

  "The vault this position is for"
  vault: ERC4626Vault!

  """
  The amount of shares assigned to this position where the subgraph can account for their source.
  If this number is different than AccountPosition.shares, then shares have been transferred/minted
  to this account using a non-ERC4626 mechanism.
  """
  accountableShares: BigDecimal!

  """
  The amount of shares assigned to this position. 
  Updated on deposit, withdraw, or transfer events that touch this account.
  """
  shares: BigDecimal!

  "The amounts earned on this account's vault withdrawals."
  earnings: [Earnings!]!

  "The account's outstanding deposits that have not yet been withdrawn."
  unconsumedLots: [CostBasisLot!]!

  "Whether any accounting issues have been detected while indexing this account's vault position."
  accountingErrata: Boolean!
}

"""
Keeps track of the cost basis of an account's vault position. 
This data is used to calculate the earnings realized when an account performs a withdraw.
"""
type CostBasisLot @entity {
  "Concatenation of txHash+logIdx"
  id: Bytes!

  block: BigInt!

  """
  The amount of underlying tokens required to purchase 1 normalized share token.
  This value is normalized with respect to the vault's asset token decimals.
  """
  pricePerShare: BigDecimal!

  "The number of underlying tokens that were exchanged for shares."
  tokensInLot: BigDecimal!

  "The number of shares that the account received."
  sharesInLot: BigDecimal!

  """
  The number of shares that have not been withdrawn from this lot yet. 
  If this is zero, then all of the shares from the lot have been withdrawn.
  """
  unconsumedShares: BigDecimal!
}

"""
Intermediate entity used by the Earnings entity
"""
type LotConsumingAction @entity @immutable {
  "Concatenation of txHash+logIdx+lotId"
  id: Bytes!

  lot: CostBasisLot!

  sharesConsumed: BigDecimal!
}

"""
Keeps track of the amount of earnings from vault withdrawls.
Earnings are calculated using LIFO.
"""
type Earnings @entity {
  "Concatenation of txHash+logIdx"
  id: Bytes!

  block: BigInt!

  vault: ERC4626Vault!

  account: Account!

  "The number of shares that were redeemed for underlying tokens."
  sharesRedeemed: BigDecimal!

  "The number of underlying tokens that were withdrawn."
  assetsWithdrawn: BigDecimal!

  """
  The amount of profit earned from the withdrawal. 
  Negative if the transaction was made at a loss. 
  Measured using the underlying asset token.
  """
  profit: BigDecimal!

  """
  The original source(s) of shares that are being redeemed.
  These sources are used to establish a cost basis price for calculating profit.
  """
  sourceLots: [LotConsumingAction!]!

  """
  The amount of shares redeemed in this earnings event that cannot be accounted for.
  This indicates an accounting error that was probably caused by a non-4626 transfer/airdrop/etc.
  If null, then all shares are accounted for.
  """
  unaccountableShares: BigDecimal
}

type DepositEvent @entity @immutable {
  "Concatenation of txHash+logIdx"
  id: Bytes!

  block: BigInt!

  "The log index of the deposit event"
  logIndex: BigInt!

  "The transaction the deposit event came from"
  transaction: Transaction!

  "The vault deposited to"
  vault: ERC4626Vault!

  "The beneficiary of the deposit"
  account: Account!

  "The address that initiated the deposit event (msg.sender)"
  sender: Bytes!

  "The amount of assets deposited. Normalized for the asset's decimals."
  assetsDeposited: BigDecimal!

  "The amount of shares minted. Normalized for the vault's decimals."
  sharesMinted: BigDecimal!

  "The lot created by this deposit"
  lot: CostBasisLot!
}

type TransferEvent @entity @immutable {
  "Concatenation of txHash+logIdx"
  id: Bytes!

  block: BigInt!

  "The log index of the transfer event"
  logIndex: BigInt!

  "The transaction the transfer event came from"
  transaction: Transaction!

  "The vault whose share token is being transferred"
  vault: ERC4626Vault!

  "The account sending the share token"
  sender: Account!

  "The account receiving the share token"
  receiver: Account!

  sharesTransferred: BigDecimal!

  "The lot created by this transfer"
  receiverLot: CostBasisLot!

  "The sender's earnings"
  senderEarnings: Earnings!
}

type WithdrawEvent @entity @immutable {
  "Concatenation of txHash+logIdx"
  id: Bytes!

  block: BigInt!

  "The log index of the withdraw event"
  logIndex: BigInt!

  "The transaction the withdraw event came from"
  transaction: Transaction!

  "The vault withdrawn from"
  vault: ERC4626Vault!

  "The account being withdrawn from"
  account: Account!

  "The address that initiated the deposit event (msg.sender)"
  sender: Bytes!

  "The amount of assets withdrawn. Normalized for the asset's decimals."
  assetsWithdrawn: BigDecimal!

  "The amount of shares redeemed. Normalized for the vault's decimals."
  sharesRedeemed: BigDecimal!

  "The earnings/profit/loss associated with the withdrawal"
  earnings: Earnings!
}

"Entity for representing transactions"
type Transaction @entity @immutable {
  "Transaction hash"
  id: Bytes!

  "Block number"
  block: BigInt!

  "Block timestamp"
  timestamp: BigInt!

  "tx.origin"
  from: Bytes!

  "Transaction Index"
  index: BigInt!

  "The deposit events from this transaction"
  depositEvents: [DepositEvent!]! @derivedFrom(field: "transaction")

  "The withdraw events from this transaction"
  withdrawEvents: [WithdrawEvent!]! @derivedFrom(field: "transaction")

  "The transfer events from this transaction"
  transferEvents: [TransferEvent!]! @derivedFrom(field: "transaction")
}

type DebugMintEvent @entity @immutable {
  id: Bytes!

  txHash: Bytes!
  blockNum: BigInt!
  vault: Bytes!
  receiver: Bytes!
  amount: BigDecimal!
}

type VaultPerformanceSample @entity @immutable {
  id: Bytes!
  vault: ERC4626Vault!
  block: BigInt!
  timestamp: BigInt!

  pricePerShare: BigDecimal!

  estimatedApy: BigDecimal!
}